generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Country {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  cameras Camera[]
  cities  City[]
  films   Film[]
}

model City {
  id        Int        @id @default(autoincrement())
  name      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  locations Location[]
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String
  cityId Int
  city   City    @relation(fields: [cityId], references: [id])
  photos Photo[]
}

model Camera {
  id          Int     @id @default(autoincrement())
  name        String
  createdYear Int
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id])
  photos      Photo[]
}

model Film {
  id          Int     @id @default(autoincrement())
  name        String
  createdYear Int
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id])
  photos      Photo[]
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  photoCategories PhotoCategory[]
}

model Photo {
  id          Int              @id @default(autoincrement())
  height      Int
  width       Int
  title       String
  description String
  shootDate   DateTime         @db.Date
  published   Boolean          @default(false)
  filmId      Int
  cameraId    Int
  locationId  Int
  createdAt   DateTime         @default(now()) @db.Date
  updatedAt   DateTime?        @updatedAt @db.Date
  camera      Camera           @relation(fields: [cameraId], references: [id])
  film        Film             @relation(fields: [filmId], references: [id])
  location    Location         @relation(fields: [locationId], references: [id])
  categories  PhotoCategory[]
  links         Link[]
}

model PhotoCategory {
  id         Int      @id @default(autoincrement())
  categoryId Int
  photoId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  photo      Photo    @relation(fields: [photoId], references: [id])
}

model Quality {
  id   Int    @id @default(autoincrement())
  name String
  links  Link[]
}

model Link {
  id        Int     @id @default(autoincrement())
  url       String  @unique
  photoId   Int
  qualityId Int
  photo     Photo   @relation(fields: [photoId], references: [id])
  quality   Quality @relation(fields: [qualityId], references: [id])
}

enum Role {
  USER
  ADMIN
}
